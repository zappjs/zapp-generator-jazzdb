import { IModel, Model, AttributeTypes as Types } from 'jazzdb';

export interface I{{{case name 'pascal'}}}Model extends IModel {
  {{#each attributes}}
  {{{@key}}}: {{{type}}};
  {{/each}}
}

export class {{{case name 'pascal'}}}Model extends Model {
  name = '{{{name}}}';
  attributes = {
    {{#each attributes}}
    {{{@key}}}: {
      {{#if required}}
      required: true,
      {{/if}}
      {{#if unique}}
      unique: true,
      {{/if}}
      type: Types.{{{case type 'pascal'}}}
    }{{#unless @last}},{{/unless}}
    {{/each}}
  };

  async load(): Promise<{{{case name 'pascal'}}}Model> {
    return super.load();
  }
  async save(): Promise<{{{case name 'pascal'}}}Model> {
    return super.save();
  }
  create(data: I{{{case name 'pascal'}}}Model): I{{{case name 'pascal'}}}Model {
    return super.create(data);
  }
  delete(id: string): I{{{case name 'pascal'}}}Model {
    return super.delete(id);
  }
  get(id: string): I{{{case name 'pascal'}}}Model {
    return super.get(id);
  }
  toArray(): I{{{case name 'pascal'}}}Model[] {
    return super.toArray();
  }
  update(id: string, data: I{{{case name 'pascal'}}}Model): I{{{case name 'pascal'}}}Model {
    return super.update(id, data);
  }
}
